{"version":3,"sources":["components/Wrapper/index.js","components/Nav/index.js","components/Scores/index.js","components/PokemonCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Nav","title","message","Scores","userScore","highScore","PokemonCard","onClick","handleClick","id","alt","name","src","image","App","state","pokemon","score","clicks","clickMessage","resetGame","_this","setState","includes","push","newScore","shufflePokemon","pokemonArray","array","i","j","temp","length","Math","floor","random","shuffle","_this2","this","components_Wrapper","components_Nav","components_Scores","map","data","components_PokemonCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5767df99.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Nav(props) {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <h1 className=\"title\">{props.title}</h1>\n                </li>\n                <li className=\"message\"><h4>{props.message}</h4></li>\n                {/* <li><h4>Score: {props.score}</h4></li>\n                <li><h4>High Score: {props.highScore}</h4></li> */}\n            </ul>\n        </nav>\n    ); // end return\n} // end Nav\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Scores(props) {\n    return (\n        <div className='container'>\n        <div className=\"row\">\n            <div className=\"col-md-3\"></div>\n            <div className=\"col-md-3 score\">Score: {props.userScore}</div>\n            <div className=\"col-md-3 score\">High Score: {props.highScore}</div>\n            <div className=\"col-md-3\"></div>\n        </div> {/* end row */}\n        </div> /* end container */\n    ); // end return\n} // end Scores\n\nexport default Scores;","import React from \"react\";\nimport \"./style.css\";\n\nfunction PokemonCard(props) {\n    return (\n        <div className=\"card\"\n        onClick={()=> props.handleClick(props.id)}\n        >\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image}></img>\n            </div> {/* end img-container */}\n        </div> /* end card */\n    ); // end return\n}// end POkemonCard\n\nexport default PokemonCard;","import React, { Component } from 'react';\n\n// import components\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Nav\";\nimport Scores from \"./components/Scores\";\nimport PokemonCard from \"./components/PokemonCard\";\n\n// the pokemon data\nimport pokemon from \"./pokemon.json\"\n\n// css for app\nimport './App.css';\n\nclass App extends Component {\n\n  // create the state object (this.state)\n  state = {\n    pokemon,\n    score: 0,\n    highScore: 0,\n    message: \"Click as many images as you can without repeating any!\",\n    clicks: [],\n    clickMessage: \"Good Luck!\"\n  }\n\n\n  // reset the game if the user loses\n  resetGame = () => {\n    this.setState({\n      score: 0,\n      clicks: [],\n    });\n  }\n\n\n\n  // function that fires when an image is clicked on \n  handleClick = (id) => {\n    // console.log(id);\n    // console.log(this.state.clicks);\n    if ((this.state.clicks.includes(id))) {\n\n      this.setState({\n        clickMessage: \"Incorrect! Try Again!\"\n      })\n\n      // check if the current score is higher then the current high score\n      if (this.state.highScore < this.state.score) {\n        const highScore = this.state.score;\n\n        this.setState({\n          highScore: highScore\n        })\n      }\n\n      this.resetGame();\n    }\n    else {\n      // push the id into the clicks array\n      this.state.clicks.push(id);\n\n      // increase the score and update state\n      const newScore = (this.state.score) + 1;\n      this.setState({\n        score: newScore,\n        clickMessage: \"Correct!\"\n      })\n\n      // call the shuffle pokemon function\n      this.shufflePokemon();\n    }\n  };\n\n  // shuffle the pokemon images\n  shufflePokemon = () => {\n    let pokemonArray = this.state.pokemon;\n\n    // function to shuffle the array (credit: Rafael)\n    function shuffle(array) {\n      var i = 0, j = 0, temp = null\n      for (i = array.length - 1; i > 0; i -= 1) {\n        j = Math.floor(Math.random() * (i + 1))\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n      }\n    }\n    // shuffle the pokemon array and set it to current state\n    shuffle(pokemonArray)\n    this.setState({ pokemon: pokemonArray })\n  };\n\n\n\n  // render the game and send all information to the necessary components\n  render() {\n    return (\n      <Wrapper>\n\n        <Nav\n          title=\"Clicky Game\"\n          message={this.state.message}\n        />\n\n        <Scores\n          userScore={this.state.score}\n          highScore={this.state.highScore}\n        />\n\n        <div className=\"container\">\n          <div className=\"row clickMessage\">\n            <p>{this.state.clickMessage}</p>\n          </div>\n        </div>\n\n        <div className=\"container pokemonContainer\">\n          <div className=\"row pokemonRow\">\n\n            {/* render each pokemon */}\n            {this.state.pokemon.map(data =>\n              <PokemonCard\n                name={data.name}\n                image={data.image}\n                key={data.id}\n                id={data.id}\n                shufflePokemon={this.shufflePokemon}\n                handleClick={this.handleClick}\n              />\n            )} {/* end map */}\n\n          </div> {/* end row */}\n        </div> {/* end container */}\n\n      </Wrapper>\n    ); // end return\n  } // end render\n} // end App class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}